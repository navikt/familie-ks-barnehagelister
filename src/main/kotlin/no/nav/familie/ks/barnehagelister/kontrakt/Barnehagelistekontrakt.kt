package no.nav.familie.ks.barnehagelister.kontrakt

import io.swagger.v3.oas.annotations.media.Schema
import io.swagger.v3.oas.annotations.media.Schema.RequiredMode.REQUIRED
import jakarta.validation.Valid
import jakarta.validation.constraints.NotBlank
import jakarta.validation.constraints.NotNull
import jakarta.validation.constraints.Pattern
import jakarta.validation.constraints.Size
import java.time.LocalDate
import java.time.YearMonth
import java.util.UUID

// TODO sanitize JSON input according to OWASP
@Schema(name = "Form", description = "Model for submitting kindergarten lists")
data class SkjemaV1(
    @Schema(
        description = "Identifier for the submission, generated by the submitter",
        example = "19375e59-0f07-4c9b-a7bb-6f30fb43819b",
    )
    @field:NotNull val id: UUID,
    @Schema(name = "kindergartens")
    @field:Valid val barnehager: List<Barnehage>?,
    @Schema(name = "listInformation")
    @field:NotNull
    @field:Valid val listeopplysninger: Listeopplysninger,
)

data class Listeopplysninger(
    @Schema(name = "municipalityName")
    @field:NotBlank
    @field:Size(min = 1, max = 200)
    val kommunenavn: String,
    @Schema(name = "municipalityNumber")
    @field:NotBlank
    @field:Size(min = 4, max = 4, message = "Municipality number must have 4 digits")
    @field:Pattern(regexp = "^[0-9]+(\\.[0-9]+)?$", message = "Municipality number must be a numeric field")
    val kommunenummer: String,
    @Schema(type = "string", format = "yearmonth", example = "2024-09", name = "submissionForYearMonth")
    val innsendingGjelderArManed: YearMonth,
)

data class Barnehage(
    @Schema(name = "name", description = "Name of the kindergarten")
    @field:NotBlank
    @field:Size(min = 1, max = 200)
    val navn: String,
    @Schema(name = "organizationNumber", description = "Kindergarten's organization number")
    @field:Size(min = 9, max = 9, message = "Organization number must have 9 digits")
    @field:Pattern(regexp = "^[0-9]+(\\.[0-9]+)?$", message = "Organization number must be a numeric field")
    @field:NotBlank
    val organisasjonsnummer: String,
    @Schema(name = "address", description = "Kindergarten's address")
    @field:Valid
    val adresse: Adresse?,
    @Schema(
        name = "childInformation",
        description = "All children assigned a place in the kindergarten during the relevant period",
    )
    @field:Valid
    val barnInfolinjer: List<BarnInfolinje>,
)

data class BarnInfolinje(
    @Schema(
        name = "agreedHoursInKindergarten",
        description = "Number of hours per week the child has agreed to stay in the kindergarten",
        example = "37.5",
    )
    val avtaltOppholdstidTimer: Double,
    @Schema(
        name = "startDate",
        description = "Start date in the kindergarten",
    )
    val startdato: LocalDate,
    @Schema(
        name = "endDate",
        description = "Date when the child leaves the kindergarten, null if the end date is not set",
    )
    val sluttdato: LocalDate?,
    @Schema(
        name = "child",
        description = "Information about the child",
    )
    @field:Valid val barn: Person,
    @Schema(
        name = "guardians",
        description = "The person(s) the child lives with; if the child lives in an institution, the field is empty",
    )
    @field:Valid val foresatte: List<Person>?,
)

data class Person(
    @Schema(
        name = "socialSecurityNumber",
        description = "Identifier for the person, i.e., SSN or D-number",
        type = "String",
        example = "12345678910",
        requiredMode = REQUIRED,
    )
    @field:NotBlank
    @field:Size(min = 11, max = 11, message = "Social Security Number must have 11 digits")
    @field:Pattern(regexp = "^[0-9]+(\\.[0-9]+)?$", message = "Social Security Number must be a numeric field")
    val fodselsnummer: String,
    @Schema(
        name = "firstName",
        description = "First name",
        example = "Ola",
        requiredMode = REQUIRED,
    )
    @field:Size(min = 1, max = 200, message = "First name can be a maximum of 200 characters.")
    @field:NotBlank
    val fornavn: String,
    @Schema(
        name = "lastName",
        description = "Last name",
        example = "Nordmann",
        requiredMode = REQUIRED,
    )
    @field:NotBlank
    @field:Size(min = 1, max = 200, message = "Last name can be a maximum of 200 characters.")
    @field:NotBlank
    val etternavn: String,
    @Schema(name = "address")
    @field:Valid
    val adresse: Adresse?,
)

@Schema(name = "Address")
data class Adresse(
    @Schema(
        name = "unitNumber",
        description = """Unit number identifies a residential unit within a building or part of a building. 
                         The letter H, L, U, or K followed by 4 digits.""",
        example = "H0101",
    )
    @field:Pattern(regexp = "(?i)^[HULK][0-9]{4}$|^$", message = "H, L, U, or K followed by 4 digits")
    @field:Size(min = 5, max = 5, message = "Unit number must have 5 characters")
    val bruksenhetsnummer: String?,
    @Schema(
        name = "addressLine1",
        description = "Street name and house number",
        example = "Svingen 1",
    )
    @field:Size(min = 1, max = 200)
    val adresselinje1: String?,
    @Schema(
        name = "addressLine2",
        description = "Alternative address",
        example = "Postboks 123",
    )
    @field:Size(min = 1, max = 200)
    val adresselinje2: String?,
    @Schema(
        name = "postalNumber",
        description = "Norwegian postal code, four digits",
        example = "0102",
    )
    @field:NotBlank
    @field:Size(min = 4, max = 4, message = "Postal code must have 4 digits")
    @field:Pattern(regexp = "^[0-9]+(\\.[0-9]+)?$", message = "Postal code must be a numeric field")
    val postnummer: String,
    @Schema(
        name = "postalTown",
        description = "Norwegian city name",
    )
    @field:NotBlank val poststed: String,
)
